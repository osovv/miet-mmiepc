def find_secret(c, n, t, z):
    # Вычисляем l, так как значение n и t известны
    l = pow(2, pow(2, t), n)
    # Используем свойство XOR, чтобы найти secret
    # secret = c ^ l ^ z
    # Решив уравнение для secret, получаем:
    # secret = c ^ (l ^ z)
    # Так как XOR является обратимой, мы можем распределить операцию XOR и найти secret
    secret = c ^ l ^ z
    return secret

def get_positive_integer(prompt):
    while True:
        try:
            number = int(input(prompt))
            if number < 0:
                print("Введите положительное целое число.")
                continue
            return number
        except ValueError:
            print("Введено не целое число. Попробуйте еще раз.")


def long_time_encrypt(secret, n, t, z):
  l = pow(2, pow(2, t), n)
  c = l ^ z ^ secret
  return c, n, t, z


c = int("""3026395149200343041894403584472397684376151532048068899448884643163678236048888818806765584
1720110193942081554547272176290791213962513701884837856823209432209367951673301622535940395
2958260533965958869429902586784307773336364500421815858373956718428783104040804871158277731
0002887677523012150957022730337467252406316571450995785096618974330575681203478424253933098
9539809241484799290089458200539852880081588116988588885595796881833083879166706313108151986
7899976508763856038788654315592194061294444134403136912537931726430738739677833557828771419
90734273830423134503534887350701449257306275708745376718426608910352496""".replace("\n", ""))
n = int("""1680116646510905298495679670221947913670069215260364000147247049360000261700229830268183221
5942994746974878002533318970006820414971818787350153626339308150944829424332670924459749331
0622873938119344577891032090908734724858653284141545743922746115746548194958941379178003045
8011945239031844060182727383452278369647225772732981995236309949844600626611501127197814314
9347765073211516486037823196033938908784720042927986421555211961923200006343296692217770693
3187019704366180665688546732609789689789744098022115380116382139767322861503119713548613001
95440286582255769421094876667270445809991401456443444265323573485901383""".replace("\n", ""))
t = 6039738711082505929
z = int("""1399175759713215657404059324206254573100362710793380038867843241825147417774539416752832552
4552592875014173967690166427876430087295180152485599151947856471802414472083299904768768434
0744465658807730292150571319084956271231037799321288077978691644096621468216266282006006789
6622338235475228090165721335714666805652523444674795964222095429423001809461246973805194202
6463767172625588865125393400027831917763819584423585903587577154729283694206436985549513217
88266642799710954968682523595890942860524722199836600601841002639244606472""".replace("\n",""))

def main():
  # c, n, t, z = long_time_encrypt(c, n, t, z)
  secret = find_secret(c,n,t,z)
  print("Secret is:", secret)

if __name__ == "__main__":
  main()
